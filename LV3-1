#define _CRT_SECURE_NO_WARNINGS
#include <stdlib.h>
#include <stdio.h>
typedef struct stog
{
	int sp;
	int polje[100];
} Stog;

int povrh(int, int);

int povrh_stog(Stog*, Stog*, int, int);

void Clear(Stog*);

void Push(Stog*, int);

int Pop(Stog*);

int IsEmpty(Stog*);



int main()
{
	Stog *s1, *s2;
	s1 = (Stog*)malloc(sizeof(Stog));
	s2 = (Stog*)malloc(sizeof(Stog));
	printf("Povrh preko rekurzije: %d\n", povrh(4, 2));
	printf("Povrh preko stoga: %d\n", povrh_stog(s1, s2, 4, 2));

	free(s1);
	free(s2);
	return 0;
}

int povrh_stog(Stog* s1, Stog* s2, int a, int b)
{
	int n, m;
	Clear(s1);
	Clear(s2);
	Push(s1, a);
	Push(s2, b);
	int povrh = 0;
	do
	{
		n = Pop(s1);
		m = Pop(s2);
		if (m == n || n == 1 || m == 0)
		{
			povrh = povrh + 1;
		}
		else
		{
			Push(s1, n - 1);
			Push(s2, m - 1);
			Push(s1, n - 1);
			Push(s2, m);
		}
	} while (IsEmpty(s1) == 0);

	return povrh;
}

int povrh(int n, int m)
{
	if (m == n || n == 1 || m == 0)
	{
		return 1;
	}
	else
	{
		return povrh(n - 1, m - 1) + povrh(n - 1, m);
	}
}

void Clear(Stog* s)
{
	s->sp = 0;
}

void Push(Stog* s, int x)
{
	s->sp += 1;
	s->polje[s->sp] = x;
}
int Pop(Stog* s)
{
	int x = s->polje[s->sp];
	s->sp = s->sp - 1;
	return x;
}
int IsEmpty(Stog* s)
{
	if (s->sp == 0)
		return 1;
	else return 0;
}
